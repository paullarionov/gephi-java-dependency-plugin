/*
 * Authors :   Evgeniy Shutov
 *             Paul Larionov
 *             
 * Website :   https://bitbucket.org/paullarionov/gephi
 * 
 *
DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.

The contents of this file are subject to the terms of either the GNU
General Public License Version 3 only ("GPL") or the Common
Development and Distribution License("CDDL") (collectively, the
"License"). You may not use this file except in compliance with the
License. You can obtain a copy of the License at
http://gephi.org/about/legal/license-notice/
or /cddl-1.0.txt and /gpl-3.0.txt. See the License for the
specific language governing permissions and limitations under the
License.  When distributing the software, include this License Header
Notice in each file and include the License files at
/cddl-1.0.txt and /gpl-3.0.txt. If applicable, add the following below the
License Header, with the fields enclosed by brackets [] replaced by
your own identifying information:
"Portions Copyrighted [year] [name of copyright owner]"
 */

package org.gephi.io.plugin.jcd;

import java.awt.Color;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.windows.TopComponent;
import org.openide.util.NbBundle.Messages;
import javax.swing.*;
import javax.swing.filechooser.FileFilter;
import java.io.File;

/**
 * Top component which displays something.
 */
class MyFileFilter extends javax.swing.filechooser.FileFilter {

    public boolean accept(File file) {
        String filename = file.getName();
        if (filename.toLowerCase().endsWith(".java")) return true;    
        if (file.isDirectory()) return true;
        return filename.endsWith(".java");
    }

    public String getDescription() {
        return "*.java";
    }
}

@ConvertAsProperties(dtd = "-//org.gephi.io.plugin.jcd//JCDGUI//EN",
autostore = false)
@TopComponent.Description(preferredID = "JCDGUITopComponent",
iconBase = "Logo.png",
persistenceType = TopComponent.PERSISTENCE_ALWAYS)
@TopComponent.Registration(mode = "properties", openAtStartup = false)
@ActionID(category = "Window", id = "org.gephi.io.plugin.jcd.JCDGUITopComponent")
@ActionReference(path = "Menu/Window" /*
 * , position = 333
 */)
//@TopComponent.OpenActionRegistration(displayName = "#CTL_JCDGUIAction",
//preferredID = "JCDGUITopComponent")
@Messages({
    "CTL_JCDGUIAction=JCDGUI",
    "CTL_JCDGUITopComponent=JCDGUI Window",
    "HINT_JCDGUITopComponent=This is a JCDGUI window"
})
public final class JCDGUITopComponent extends JPanel {

        public JCDGUITopComponent() {
        initComponents();
        setName(Bundle.CTL_JCDGUITopComponent());
        setToolTipText(Bundle.HINT_JCDGUITopComponent());
    }
        
    public JCDGUITopComponent(String path) {
        initComponents();
        setName(Bundle.CTL_JCDGUITopComponent());
        setToolTipText(Bundle.HINT_JCDGUITopComponent());
        jPath.setText(path);
    }

     public JCDGUITopComponent(String path, Object[] pf, Object[] cf) {
        initComponents();
        setName(Bundle.CTL_JCDGUITopComponent());
        setToolTipText(Bundle.HINT_JCDGUITopComponent());
        jPath.setText(path);
        if (pf != null)
        {
            for (Object f: pf)
            {
                this.packFilter.addElement(f.toString());
            }
        }
        
                if (cf != null)
        {
            for (Object f: cf)
            {
                this.classFilter.addElement(f.toString());
            }
        }

    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel3 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jPath = new javax.swing.JTextField();
        jUseOne = new javax.swing.JRadioButton();
        jUseAll = new javax.swing.JRadioButton();
        jToolBar2 = new javax.swing.JToolBar();
        jOpenButton = new javax.swing.JToggleButton();
        jPanel2 = new javax.swing.JPanel();
        jLongName = new javax.swing.JCheckBox();
        jClearWorkspace = new javax.swing.JCheckBox();
        jPanelFilter = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jPackFilter = new javax.swing.JList();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jClassFilter = new javax.swing.JList();
        jToolBar3 = new javax.swing.JToolBar();
        jClassAdd = new javax.swing.JButton();
        jClassRem = new javax.swing.JButton();
        jToolBar1 = new javax.swing.JToolBar();
        jPackAdd = new javax.swing.JButton();
        jPackRem = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();

        setMaximumSize(new java.awt.Dimension(450, 222));
        setMinimumSize(new java.awt.Dimension(450, 222));
        setName(org.openide.util.NbBundle.getMessage(JCDGUITopComponent.class, "JCDGUITopComponent.name")); // NOI18N
        setLayout(new javax.swing.BoxLayout(this, javax.swing.BoxLayout.PAGE_AXIS));

        jPanel3.setBackground(new java.awt.Color(102, 102, 102));

        jButton1.setBackground(new java.awt.Color(102, 102, 102));
        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/gephi/io/plugin/jcd/Logo.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(jButton1, org.openide.util.NbBundle.getMessage(JCDGUITopComponent.class, "JCDGUITopComponent.jButton1.text")); // NOI18N
        jButton1.setBorder(null);
        jButton1.setBorderPainted(false);
        jButton1.setContentAreaFilled(false);
        jButton1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton1.setFocusable(false);
        jButton1.setPreferredSize(new java.awt.Dimension(300, 300));
        jButton1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jButton1MousePressed(evt);
            }
        });

        jLabel3.setBackground(new java.awt.Color(255, 255, 255));
        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        org.openide.awt.Mnemonics.setLocalizedText(jLabel3, org.openide.util.NbBundle.getMessage(JCDGUITopComponent.class, "JCDGUITopComponent.jLabel3.text")); // NOI18N

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        org.openide.awt.Mnemonics.setLocalizedText(jLabel2, org.openide.util.NbBundle.getMessage(JCDGUITopComponent.class, "JCDGUITopComponent.jLabel2.text")); // NOI18N

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addComponent(jLabel2))
                .addContainerGap(19, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3)
                .addGap(18, 18, 18)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel3Layout.createSequentialGroup()
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        add(jPanel3);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(org.openide.util.NbBundle.getMessage(JCDGUITopComponent.class, "JCDGUITopComponent.jPanel1.border.title"))); // NOI18N
        jPanel1.setToolTipText(org.openide.util.NbBundle.getMessage(JCDGUITopComponent.class, "JCDGUITopComponent.jPanel1.toolTipText")); // NOI18N
        jPanel1.setName(org.openide.util.NbBundle.getMessage(JCDGUITopComponent.class, "JCDGUITopComponent.jPanel1.name")); // NOI18N
        jPanel1.setPreferredSize(new java.awt.Dimension(200, 90));

        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle.getMessage(JCDGUITopComponent.class, "JCDGUITopComponent.jLabel1.text")); // NOI18N

        jPath.setText(org.openide.util.NbBundle.getMessage(JCDGUITopComponent.class, "JCDGUITopComponent.jPath.text")); // NOI18N
        jPath.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jPathMouseClicked(evt);
            }
        });
        jPath.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jPathActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jUseOne, org.openide.util.NbBundle.getMessage(JCDGUITopComponent.class, "JCDGUITopComponent.jUseOne.text")); // NOI18N
        jUseOne.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jUseOneActionPerformed(evt);
            }
        });

        jUseAll.setSelected(true);
        org.openide.awt.Mnemonics.setLocalizedText(jUseAll, org.openide.util.NbBundle.getMessage(JCDGUITopComponent.class, "JCDGUITopComponent.jUseAll.text")); // NOI18N
        jUseAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jUseAllActionPerformed(evt);
            }
        });

        jToolBar2.setBorder(null);
        jToolBar2.setFloatable(false);
        jToolBar2.setOrientation(javax.swing.SwingConstants.VERTICAL);
        jToolBar2.setRollover(true);
        jToolBar2.setBorderPainted(false);
        jToolBar2.setFocusable(false);

        jOpenButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/gephi/io/plugin/jcd/Open.gif"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(jOpenButton, org.openide.util.NbBundle.getMessage(JCDGUITopComponent.class, "JCDGUITopComponent.jOpenButton.text")); // NOI18N
        jOpenButton.setToolTipText(org.openide.util.NbBundle.getMessage(JCDGUITopComponent.class, "JCDGUITopComponent.jOpenButton.toolTipText")); // NOI18N
        jOpenButton.setFocusable(false);
        jOpenButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jOpenButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jOpenButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jOpenButtonActionPerformed(evt);
            }
        });
        jToolBar2.add(jOpenButton);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addContainerGap())
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addComponent(jUseAll)
                                .addGap(33, 33, 33)
                                .addComponent(jUseOne))
                            .addComponent(jPath, javax.swing.GroupLayout.PREFERRED_SIZE, 396, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jToolBar2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(24, 24, 24))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jToolBar2, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jPath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jUseAll)
                            .addComponent(jUseOne, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap(34, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        add(jPanel1);

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(org.openide.util.NbBundle.getMessage(JCDGUITopComponent.class, "JCDGUITopComponent.jPanel2.border.title"))); // NOI18N
        jPanel2.setToolTipText("");
        jPanel2.setVerifyInputWhenFocusTarget(false);

        org.openide.awt.Mnemonics.setLocalizedText(jLongName, org.openide.util.NbBundle.getMessage(JCDGUITopComponent.class, "JCDGUITopComponent.jLongName.text")); // NOI18N
        jLongName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jLongNameActionPerformed(evt);
            }
        });

        jClearWorkspace.setSelected(true);
        org.openide.awt.Mnemonics.setLocalizedText(jClearWorkspace, org.openide.util.NbBundle.getMessage(JCDGUITopComponent.class, "JCDGUITopComponent.jClearWorkspace.text")); // NOI18N
        jClearWorkspace.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jClearWorkspaceActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(jLongName)
                .addGap(18, 18, 18)
                .addComponent(jClearWorkspace)
                .addContainerGap(104, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jClearWorkspace)
                    .addComponent(jLongName))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        add(jPanel2);

        jPanelFilter.setBorder(javax.swing.BorderFactory.createTitledBorder(org.openide.util.NbBundle.getMessage(JCDGUITopComponent.class, "JCDGUITopComponent.jPanelFilter.border.title"))); // NOI18N
        jPanelFilter.setToolTipText(org.openide.util.NbBundle.getMessage(JCDGUITopComponent.class, "JCDGUITopComponent.jPanelFilter.toolTipText")); // NOI18N

        jPackFilter.setModel(packFilter);
        jPackFilter.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jPackFilterMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jPackFilter);

        org.openide.awt.Mnemonics.setLocalizedText(jLabel4, org.openide.util.NbBundle.getMessage(JCDGUITopComponent.class, "JCDGUITopComponent.jLabel4.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel5, org.openide.util.NbBundle.getMessage(JCDGUITopComponent.class, "JCDGUITopComponent.jLabel5.text")); // NOI18N

        jClassFilter.setModel(classFilter);
        jClassFilter.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jClassFilterMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(jClassFilter);

        jToolBar3.setBorder(null);
        jToolBar3.setFloatable(false);
        jToolBar3.setOrientation(javax.swing.SwingConstants.VERTICAL);
        jToolBar3.setRollover(true);
        jToolBar3.setBorderPainted(false);
        jToolBar3.setFocusable(false);

        jClassAdd.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/gephi/io/plugin/jcd/Add.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(jClassAdd, org.openide.util.NbBundle.getMessage(JCDGUITopComponent.class, "JCDGUITopComponent.jClassAdd.text")); // NOI18N
        jClassAdd.setToolTipText(org.openide.util.NbBundle.getMessage(JCDGUITopComponent.class, "JCDGUITopComponent.jClassAdd.toolTipText")); // NOI18N
        jClassAdd.setFocusable(false);
        jClassAdd.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jClassAdd.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jClassAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jClassAddActionPerformed(evt);
            }
        });
        jToolBar3.add(jClassAdd);

        jClassRem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/gephi/io/plugin/jcd/Rem.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(jClassRem, org.openide.util.NbBundle.getMessage(JCDGUITopComponent.class, "JCDGUITopComponent.jClassRem.text")); // NOI18N
        jClassRem.setToolTipText(org.openide.util.NbBundle.getMessage(JCDGUITopComponent.class, "JCDGUITopComponent.jClassRem.toolTipText")); // NOI18N
        jClassRem.setFocusable(false);
        jClassRem.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jClassRem.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jClassRem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jClassRemActionPerformed(evt);
            }
        });
        jToolBar3.add(jClassRem);

        jToolBar1.setBorder(null);
        jToolBar1.setFloatable(false);
        jToolBar1.setOrientation(javax.swing.SwingConstants.VERTICAL);
        jToolBar1.setRollover(true);
        jToolBar1.setBorderPainted(false);
        jToolBar1.setFocusCycleRoot(true);
        jToolBar1.setFocusable(false);

        jPackAdd.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/gephi/io/plugin/jcd/Add.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(jPackAdd, org.openide.util.NbBundle.getMessage(JCDGUITopComponent.class, "JCDGUITopComponent.jPackAdd.text")); // NOI18N
        jPackAdd.setToolTipText(org.openide.util.NbBundle.getMessage(JCDGUITopComponent.class, "JCDGUITopComponent.jPackAdd.toolTipText")); // NOI18N
        jPackAdd.setFocusable(false);
        jPackAdd.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jPackAdd.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jPackAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jPackAddActionPerformed(evt);
            }
        });
        jToolBar1.add(jPackAdd);

        jPackRem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/gephi/io/plugin/jcd/Rem.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(jPackRem, org.openide.util.NbBundle.getMessage(JCDGUITopComponent.class, "JCDGUITopComponent.jPackRem.text")); // NOI18N
        jPackRem.setToolTipText(org.openide.util.NbBundle.getMessage(JCDGUITopComponent.class, "JCDGUITopComponent.jPackRem.toolTipText")); // NOI18N
        jPackRem.setFocusable(false);
        jPackRem.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jPackRem.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jPackRem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jPackRemActionPerformed(evt);
            }
        });
        jToolBar1.add(jPackRem);

        javax.swing.GroupLayout jPanelFilterLayout = new javax.swing.GroupLayout(jPanelFilter);
        jPanelFilter.setLayout(jPanelFilterLayout);
        jPanelFilterLayout.setHorizontalGroup(
            jPanelFilterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelFilterLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelFilterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel4)
                    .addComponent(jLabel5)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 397, Short.MAX_VALUE)
                    .addComponent(jScrollPane2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelFilterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jToolBar1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jToolBar3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(12, Short.MAX_VALUE))
        );
        jPanelFilterLayout.setVerticalGroup(
            jPanelFilterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelFilterLayout.createSequentialGroup()
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelFilterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelFilterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jToolBar3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        add(jPanelFilter);
        jPanelFilter.getAccessibleContext().setAccessibleName(org.openide.util.NbBundle.getMessage(JCDGUITopComponent.class, "JCDGUITopComponent.jPanelFilter.AccessibleContext.accessibleName")); // NOI18N

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 464, Short.MAX_VALUE)
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        add(jPanel4);
    }// </editor-fold>//GEN-END:initComponents

    private void jOpenButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jOpenButtonActionPerformed
        JFileChooser fc = new JFileChooser();
        fc.setCurrentDirectory(new File(this.jPath.getText()));
        if (jUseOne.isSelected() == true) {
            fc.setFileSelectionMode(JFileChooser.FILES_ONLY);
            fc.setFileFilter(new MyFileFilter());
            
        } else {
            fc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        }

        
        int returnVal = fc.showOpenDialog(this);

        if (returnVal == JFileChooser.APPROVE_OPTION) {
            jPath.setText(fc.getSelectedFile().getAbsolutePath());
            JCDGenerator.log.info("GUI: path = " + jPath.toString());

        } else {
            JCDGenerator.log.info("GUI: path = canceled");
        }
        
        jPath.setBackground(Color.white);
        jPath.setToolTipText("");


    }//GEN-LAST:event_jOpenButtonActionPerformed

    private void jPathMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPathMouseClicked
        jPath.setBackground(Color.white);
        jPath.setToolTipText("");
    }//GEN-LAST:event_jPathMouseClicked

    private void jUseOneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jUseOneActionPerformed
        if (jUseOne.isSelected() == true) {
            jUseAll.setSelected(false);

            if (!(new File(jPath.getText()).isFile()) || "".equals(jPath.getText()))
            {
            jPath.setBackground(new java.awt.Color(164, 132, 195));
            jPath.setToolTipText("Make sure that you have specified a java-file.");
            }
            else
            {
                jPath.setBackground(Color.white);
                jPath.setToolTipText("");
            }

        }
    }//GEN-LAST:event_jUseOneActionPerformed

    private void jUseAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jUseAllActionPerformed
        if (jUseAll.isSelected() == true) {
            jUseOne.setSelected(false);
            
            if (!(new File(jPath.getText()).isDirectory()) || "".equals(jPath.getText()))
            {
            jPath.setBackground(new java.awt.Color(164, 132, 195));
            jPath.setToolTipText("Make sure that you have specified a folder.");
            }
                        else
            {
                jPath.setBackground(Color.white);
                jPath.setToolTipText("");
            }
        }

    }//GEN-LAST:event_jUseAllActionPerformed

    private void jLongNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jLongNameActionPerformed
    }//GEN-LAST:event_jLongNameActionPerformed

    private void jButton1MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton1MousePressed

        AboutDialog();
    }//GEN-LAST:event_jButton1MousePressed

    private void jPathActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jPathActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jPathActionPerformed

    private void jClearWorkspaceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jClearWorkspaceActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jClearWorkspaceActionPerformed

    private void jPackAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jPackAddActionPerformed
                       
                String in = JOptionPane.showInputDialog(this, "Input package:", "Add Filter", JOptionPane.QUESTION_MESSAGE);
                if (in!= null && !"".equals(in))
                {
                    this.packFilter.addElement(in);
                }
        
    }//GEN-LAST:event_jPackAddActionPerformed

    private void jPackRemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jPackRemActionPerformed
        try
        {
        int pos = this.jPackFilter.getSelectedIndex();
        if (pos < 0) return;
        this.packFilter.removeElementAt(pos);        
        }
        catch (Exception e)
        {
          e.printStackTrace();
        }
            }//GEN-LAST:event_jPackRemActionPerformed

    private void jClassAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jClassAddActionPerformed
                String in = JOptionPane.showInputDialog(this, "Input class:", "Add Filter", JOptionPane.QUESTION_MESSAGE);
                if (in!= null && !"".equals(in))
                {
                    this.classFilter.addElement(in);
                }
            }//GEN-LAST:event_jClassAddActionPerformed

    private void jClassRemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jClassRemActionPerformed
        try
        {
        int pos = this.jClassFilter.getSelectedIndex();
        if (pos < 0) return;
        this.classFilter.removeElementAt(pos);        
        }
        catch (Exception e)
        {
          e.printStackTrace();
        }    }//GEN-LAST:event_jClassRemActionPerformed

    private void jPackFilterMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPackFilterMouseClicked
if (evt.getClickCount() == 2)
        {   
                int index = this.jPackFilter.getSelectedIndex();
                if (index<0 || index>=this.packFilter.size()) return;
                String in = JOptionPane.showInputDialog(this, "Change packet "+ this.packFilter.elementAt(index)+" to:", "Filter Change", JOptionPane.QUESTION_MESSAGE);
                if (in!= null && !"".equals(in))
                {
                    this.packFilter.set(index, in);
                }
        }
    }//GEN-LAST:event_jPackFilterMouseClicked

    private void jClassFilterMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jClassFilterMouseClicked
                if (evt.getClickCount() == 2)
        {   
                int index = this.jClassFilter.getSelectedIndex();
                if (index<0 || index>=this.classFilter.size()) return;
                String in = JOptionPane.showInputDialog(this, "Change class "+ this.classFilter.elementAt(index)+" to:", "Filter Change", JOptionPane.QUESTION_MESSAGE);
                if (in!= null && !"".equals(in))
                {
                    this.classFilter.set(index, in);
                }
        }
    }//GEN-LAST:event_jClassFilterMouseClicked

    public void AboutDialog() {

        String eol = System.getProperty("line.separator");
        JOptionPane.showMessageDialog(this,
                  "Java Class Dependency Plugin 1.6" + eol + eol
                + "Saint-Petersburg State Polytechnical University" + eol
                + "Authors:   Evgeniy Shutov, Paul Larionov" +  eol
                + "Website:   https://bitbucket.org/paullarionov/gephi" +  eol + eol
                + "This software may be used under the terms of the GNU "  + eol
                + "General Public License Version 2 or later (the GPL)." + eol + eol
                + "This software uses Gephi Graph Visualization software" + eol
                + "licensed under the dual license CDDL and GNU General "  + eol
                + "Public License version 3, copyright Gephi contributors."  + eol   + eol
                + "This software uses Java Programming Language Compiler"  + eol
                + "licensed under the GNU General Public License, copyright"  + eol
                + "Oracle Corporation."   + eol  + eol
                
                , "About",
                JOptionPane.INFORMATION_MESSAGE);


    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jClassAdd;
    private javax.swing.JList jClassFilter;
    private javax.swing.JButton jClassRem;
    public javax.swing.JCheckBox jClearWorkspace;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    public javax.swing.JCheckBox jLongName;
    private javax.swing.JToggleButton jOpenButton;
    private javax.swing.JButton jPackAdd;
    private javax.swing.JList jPackFilter;
    private javax.swing.JButton jPackRem;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanelFilter;
    public javax.swing.JTextField jPath;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JToolBar jToolBar2;
    private javax.swing.JToolBar jToolBar3;
    public javax.swing.JRadioButton jUseAll;
    public javax.swing.JRadioButton jUseOne;
    // End of variables declaration//GEN-END:variables

    DefaultListModel packFilter = new DefaultListModel();
    DefaultListModel classFilter = new DefaultListModel();
    
    
    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.6");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }
}
